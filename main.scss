/* nested selectors (to many nest though! not good coding its just for the example*/
/*
.wrapper {
    .main {
        .container {
            .article {
                .post {
                    p {
                        color: blue;
                    }
                }
            }
        }
    }  
}*/


/* Parent selector: We nest the wrapper that is the parent of the main element
and we are using the amper sign to signify that it is the parent (wrapper &)*/
.main {
    .wrapper & {
        width: 300px;
        height: 300px;
        background: yellow;
    }
}


/* nested properties */ 

p {
    font: {
        family: open-sans;
        size: 30px;
        weight: 500
    }

    text: {
        align: center;
        transform: uppercase;
    }
}

/* placeholder - is like a bunch of code thats not going to be used immediately, as
it is only used when you extend it in a CSS class */

%backgroundImage {
    background: {
        size: cover;
        position: center center;
        repeat: no-repeat;
    }
}

.div {
    @extend %backgroundImage;
}

.continer {
    background-image: url("https://dummyimage.com/450x250/f00/fff");
}

.article {
    background-image: url("https://dummyimage.com/450x250/000/fff");
}

.post {
    background-image: url("https://dummyimage.com/450x250/ddd/fff");
}

/*------------------END OF VIDEO 1 AND 2 ----------------------------*/ 

/*------------------START OF VIDEO 3 ----------------------------*/ 
/* Scss as a scripting language with logic 
    With SASS we can declare VARIABLES, FUNCTIONS, MAPS, LISTS and other functions */ 

/* FUNCTION @ (that converts pixels to em) */ 

@function pxToEm($value, $base) {
    @return ($value / $base) + em;
}

h1 {
    font-size: pxToEm(32, 16);
}

/* VARIABLE $ (alert, warning etc use descriptive names*/

$blue: #0997d3;
$red: #e84610;
$green: #bada55;
$black: #000000;
$white: #ffff;

$width: 300px;
$height: 500px;

/* declare all colors in a map into an object */
$colors: (
    black: #000000,
    red: #e84610,
    green: #bada55
);

@each $key, $value in $colors {
    .item-#{$key} {
        background-color: $value;
    }
}

body {
    background-color: $black;
}

div {
    border: 1px solid $black;
}

h1 {
    color: $white;
}

/* pass a variable to a class */ 

$class: container;

div.#{$class} {
    background-color: orange;
}


/*------------------END OF VIDEO 3 ----------------------------*/ 

/*------------------START OF VIDEO 4 ----------------------------
    Scss as a scripting language mixins */ 

/* for-loop */ 

$class-name: item;

@for $i from 1 through 4 {
    .#{$class-name}-#{$i} {
        width: 60px + $i;
    }
}

/* if-else */  

$random: 5; /* fixed value of 5 */

/*h1 {
    @if $random > 5 {
        color: blue;
    }
    @else if $random == 3 {
        color: purple;
    }
    @else {
        color: orange;
    }
}*/

/* Mixins are similar to functions and are used for code that you want to reuse throughout your site
    Mixin called button */

@mixin button($color, $size) {
    width: $size;
    height: $size / 2;
    border: 1px solid $color;

    @if color == #e84610 {
        color: #fff;
    }
    @else {
        color: $color;
    }
}

@mixin unicornify() {
    background-color: pink;
    color: white;
    @content;
    font-size: 30px;
    font-weight: bold;
}

p {
    @include unicornify {
        border: 1px solid pink;
        border-radius: 100%;
        text-align: center;
    }
}

.btn {
    @include button(#e84610, 200px)
}
    
h1 {
    @if 1 + 1 == 2 {
        border: 1px solid black;
    }
}

/*------------------END OF VIDEO 4 ----------------------------*/ 

/*----------- STRUCTURING YOUR PROJECT WITH SCSS (1 VIDEO) ----------*/
